declare class DomSnapshot {
    private BODY_STYLE;
    private CACHE_KEYS;
    private CACHE_VALUES;
    private BODY_ATTRIBUTES;
    private restrictedNodeTypes;
    private isLoaded;
    private skipDisplayNone;
    private HTML_STYLE;
    private items;
    private meta;
    private _USE_VACUUM;
    private _USE_INLINE_STYLES;
    private _USE_STYLES_CLEANUP;
    private _USE_PSEUDOSELECTORS;
    private _USE_SAFE_ATTRIBUTES;
    private _NAMESPACES;
    private nodeCache;
    private NODE_NAMES_TO_IGNORE;
    private NODE_NAMES_TO_REPLACE;
    private _html;
    private _head;
    private _body;
    private PSEUDOSELECTORS;
    private INHERIT;
    private SKIP_STYLES;
    private fbConfig;
    constructor(config?: {
        inlineStyles: boolean;
        vacuum: boolean;
        stylesCleanup: boolean;
        capturePseudoselectors: boolean;
        safeAttributes: boolean;
        state: {
            BODY_STYLE: any[];
            CACHE_KEYS: any[];
            CACHE_VALUES: any[];
            HTML_STYLE: any[];
            items: any[];
            meta: {
                protocol: string;
                hostname: string;
            };
        };
    }, fbConfig?: boolean);
    _normalizeAttributeName(attrName: any): string;
    _isSafeAttribute(attrName: any): boolean;
    _extractNodeAttributes(node: any): any;
    resetTarget(): void;
    restoreTo(node: any): void;
    _collectMeta(): {
        userAgent: string;
        hostname: string;
        protocol: string;
        url: string;
        screenWidth: number;
        screenHeight: number;
        screenAvailWidth: number;
        screenAvailHeight: number;
        timestamp: number;
    };
    _patchAttribute(name: any, value: any): any;
    _isSVG(element: any): any;
    _getBodyAttributes(): any;
    _getBodyStyle(): {};
    _getHTMLStyle(): {};
    _getBodyParentStyle(): {};
    addMeta(keyOrObject: any, value: any, target?: this): this;
    getMeta(): object & {};
    clearMeta(): void;
    _addFbScript(resolve: any, reject: any, config: any): void;
    intFirebase(fbConfig: any): any;
    loaded(): any;
    _getHead(): any;
    _cleanHeadNodeFromStyles(): void;
    _addStyleNode(css: any, target?: boolean): void;
    _getDomNodeFromArgument(selector: any): any;
    _cleanDomNode(target: any): void;
    takeSnapshot(selector: any): {
        meta: any;
        items: any;
        HTML_STYLE: any;
        BODY_STYLE: any;
        CACHE_KEYS: any;
        CACHE_VALUES: any;
        BODY_ATTRIBUTES: any;
    };
    renderSnapshot(selector: any, snapshot: any, rewriteDomContent?: boolean): void;
    showSnapshot(id: any, selector?: boolean): Promise<void>;
    restoreSnapshot(id: any): any;
    _fbAddToSnapshotList(id: any, data: any): void;
    _fbSetSnapshot(id: any, snapshot: any): void;
    _fbGetSnapshot(id: any): Promise<{}>;
    getSnapshotById(id: any): Promise<{}>;
    _showSnapshot(id: string, rootElement: any): Promise<void>;
    _clearState(target: any): void;
    _getArrayCopy(element: any): any;
    _cloneObject(obj: any): any;
    _copyWorld(rootNode: boolean, source: any): void;
    _copyWorldTo(rootNode: any, source: any): void;
    _getHtmlNode(): any;
    restoreWorld(target: boolean, source: any): this;
    _forEach(array: any, action: any): void;
    restoreWorldFrom(source: any, target?: boolean): this;
    _destroyBodyAttributes(): this;
    destroyWorld(): this;
    _createStyleObject(styleNode: any): {};
    _isDefaultStyle(name: any, value: any): boolean;
    _vacuum(items: any): any;
    _cleanupStyles(source: any): void;
    _getNameForNode(nodeName: any): any;
    _getParentForNode(node: any): number;
    _getNodeTextContent(node: any): any;
    _arrayToObject(arr?: any[]): any;
    getSnapshotsDiff(s1: any, s2: any): {
        firstNode: any;
        secondNode: any;
        stylesDiff: {};
        attributesDiff: {};
    }[];
    _serializeNode(styleNode: any, node: any, index: any, source: any): {
        styles: any[];
        nodeName: any;
        index: any;
        nodeType: any;
        parent: number;
        isSVG: any;
        textContent: any;
    };
    _formatStyle(styleNode: any, node: any, index: any, source: any): {
        styles: any[];
        nodeName: any;
        index: any;
        nodeType: any;
        parent: number;
        isSVG: any;
        textContent: any;
    };
    _getAllDomNodes(node: any): any[];
    _fbSaveSnapshot(id: any, state: any): void;
    createSnapshot(rootNode?: boolean): {
        meta: any;
        items: any;
        HTML_STYLE: any;
        BODY_STYLE: any;
        CACHE_KEYS: any;
        CACHE_VALUES: any;
        BODY_ATTRIBUTES: any;
    };
    saveSnapshot(customId: boolean, state: any): number | true;
    _setBodyAttributes(source: any): this;
    setBodyNode(node: any): void;
    _setBodyStyle(source: any): this;
    setHeadNode(node: any): void;
    _setHTMLStyle(source: any): this;
    setHtmlNode(node: any): void;
    _setNodeStyleFromStyleArray(styles: any, node: any, source: any): any;
    setMeta(meta: any): this;
    setState(target: this, state: any): this;
    setStyleFromObject(node: any, styleObject: any): this;
    setTarget(node: any): void;
    _styleObjectToOptimalStyleArray(styleObject: {}, parentIndex: any, source: any): any[];
    skipStyle(name: any, value: any): boolean;
    _shouldTakeElement(node: any, nodeStyle: any): boolean;
    isNotUndefined(el: any): boolean;
    _isNotEmptyArray(arr: any): any;
    _hasTextContent(node?: {
        textContent: string;
    }): number;
    _hasNodeInCache(nodeName: any): boolean;
    _addNodeToCache(nodeName: any): void;
    _getTextNode(textContent: any): Text;
    _getSVGNode(nodeName: any): Element;
    _addTextContent(node: any, params: any): void;
    _createNode(params: {
        nodeType: string;
        textContent: string;
        isSVG: boolean;
        nodeName: string;
    }, styles: any, source: any): any;
    _styleTextForNode(index: any, styles: any, postfix: string, source: any): string;
    _insertNode(node: any, obj: any, fragment: any, nodesIndex: any): void;
    _getValueOrEmptyString(obj: any, key: any): any;
    _getAllKeysDiff(first?: {}, second?: {}): {};
    _getEqualKeysDiff(first: any, second: any): {};
    _getStylesForPseudoSelectors(node: any, source: any): false | {
        before: any[];
        after: any[];
        diff: {};
    };
    _getStyleForNode(element: any, pseudoselecor?: any): any[] | CSSStyleDeclaration;
    _getBodyNode(): any;
    _getDocument(): Document;
    _getNodeStyleText(styles: any, source: any): string;
    _getNodeByName(nodeName: any): any;
    _getNodeFromCache(tag: any): any;
    _getFromOptimalValue(value: any, source?: this): any[];
    getOptimalValue(key: any, value: any, source: any): string | false;
    _getState(target: any): {
        meta: any;
        items: any;
        HTML_STYLE: any;
        BODY_STYLE: any;
        CACHE_KEYS: any;
        CACHE_VALUES: any;
        BODY_ATTRIBUTES: any;
    };
    getParentStyleByIndex(index: any, source: any): any;
}
